%!PS-Adobe-3.0 EPSF-3.0
%%Creator: (ImageMagick)
%%Title: (crystalsvg_1downarrow.eps)
%%CreationDate: (Sat Jan 24 07:56:41 2009)
%%BoundingBox: 0 0 22 22
%%HiResBoundingBox: 0 0 22 22
%%DocumentData: Clean7Bit
%%LanguageLevel: 1
%%Pages: 1
%%EndComments

%%BeginDefaults
%%EndDefaults

%%BeginProlog
%
% Display a color image.  The image is displayed in color on
% Postscript viewers or printers that support color, otherwise
% it is displayed as grayscale.
%
/DirectClassPacket
{
  %
  % Get a DirectClass packet.
  %
  % Parameters:
  %   red.
  %   green.
  %   blue.
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile color_packet readhexstring pop pop
  compression 0 eq
  {
    /number_pixels 3 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add 3 mul def
  } ifelse
  0 3 number_pixels 1 sub
  {
    pixels exch color_packet putinterval
  } for
  pixels 0 number_pixels getinterval
} bind def

/DirectClassImage
{
  %
  % Display a DirectClass image.
  %
  systemdict /colorimage known
  {
    columns rows 8
    [
      columns 0 0
      rows neg 0 rows
    ]
    { DirectClassPacket } false 3 colorimage
  }
  {
    %
    % No colorimage operator;  convert to grayscale.
    %
    columns rows 8
    [
      columns 0 0
      rows neg 0 rows
    ]
    { GrayDirectClassPacket } image
  } ifelse
} bind def

/GrayDirectClassPacket
{
  %
  % Get a DirectClass packet;  convert to grayscale.
  %
  % Parameters:
  %   red
  %   green
  %   blue
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile color_packet readhexstring pop pop
  color_packet 0 get 0.299 mul
  color_packet 1 get 0.587 mul add
  color_packet 2 get 0.114 mul add
  cvi
  /gray_packet exch def
  compression 0 eq
  {
    /number_pixels 1 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add def
  } ifelse
  0 1 number_pixels 1 sub
  {
    pixels exch gray_packet put
  } for
  pixels 0 number_pixels getinterval
} bind def

/GrayPseudoClassPacket
{
  %
  % Get a PseudoClass packet;  convert to grayscale.
  %
  % Parameters:
  %   index: index into the colormap.
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile byte readhexstring pop 0 get
  /offset exch 3 mul def
  /color_packet colormap offset 3 getinterval def
  color_packet 0 get 0.299 mul
  color_packet 1 get 0.587 mul add
  color_packet 2 get 0.114 mul add
  cvi
  /gray_packet exch def
  compression 0 eq
  {
    /number_pixels 1 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add def
  } ifelse
  0 1 number_pixels 1 sub
  {
    pixels exch gray_packet put
  } for
  pixels 0 number_pixels getinterval
} bind def

/PseudoClassPacket
{
  %
  % Get a PseudoClass packet.
  %
  % Parameters:
  %   index: index into the colormap.
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile byte readhexstring pop 0 get
  /offset exch 3 mul def
  /color_packet colormap offset 3 getinterval def
  compression 0 eq
  {
    /number_pixels 3 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add 3 mul def
  } ifelse
  0 3 number_pixels 1 sub
  {
    pixels exch color_packet putinterval
  } for
  pixels 0 number_pixels getinterval
} bind def

/PseudoClassImage
{
  %
  % Display a PseudoClass image.
  %
  % Parameters:
  %   class: 0-PseudoClass or 1-Grayscale.
  %
  currentfile buffer readline pop
  token pop /class exch def pop
  class 0 gt
  {
    currentfile buffer readline pop
    token pop /depth exch def pop
    /grays columns 8 add depth sub depth mul 8 idiv string def
    columns rows depth
    [
      columns 0 0
      rows neg 0 rows
    ]
    { currentfile grays readhexstring pop } image
  }
  {
    %
    % Parameters:
    %   colors: number of colors in the colormap.
    %   colormap: red, green, blue color packets.
    %
    currentfile buffer readline pop
    token pop /colors exch def pop
    /colors colors 3 mul def
    /colormap colors string def
    currentfile colormap readhexstring pop pop
    systemdict /colorimage known
    {
      columns rows 8
      [
        columns 0 0
        rows neg 0 rows
      ]
      { PseudoClassPacket } false 3 colorimage
    }
    {
      %
      % No colorimage operator;  convert to grayscale.
      %
      columns rows 8
      [
        columns 0 0
        rows neg 0 rows
      ]
      { GrayPseudoClassPacket } image
    } ifelse
  } ifelse
} bind def

/DisplayImage
{
  %
  % Display a DirectClass or PseudoClass image.
  %
  % Parameters:
  %   x & y translation.
  %   x & y scale.
  %   label pointsize.
  %   image label.
  %   image columns & rows.
  %   class: 0-DirectClass or 1-PseudoClass.
  %   compression: 0-none or 1-RunlengthEncoded.
  %   hex color packets.
  %
  gsave
  /buffer 512 string def
  /byte 1 string def
  /color_packet 3 string def
  /pixels 768 string def

  currentfile buffer readline pop
  token pop /x exch def
  token pop /y exch def pop
  x y translate
  currentfile buffer readline pop
  token pop /x exch def
  token pop /y exch def pop
  currentfile buffer readline pop
  token pop /pointsize exch def pop
  /Times-Roman findfont pointsize scalefont setfont
  x y scale
  currentfile buffer readline pop
  token pop /columns exch def
  token pop /rows exch def pop
  currentfile buffer readline pop
  token pop /class exch def pop
  currentfile buffer readline pop
  token pop /compression exch def pop
  class 0 gt { PseudoClassImage } { DirectClassImage } ifelse
  grestore
} bind def
%%EndProlog
%%Page:  1 1
%%PageBoundingBox: 0 0 22 22
userdict begin
DisplayImage
0 0
22 22
12.000000
22 22
0
0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffff2663BF2561BD235CB92157B51F52B11E4DAE1C48AA1A44A6
183FA2163A9E14359B123097102B930F268F0D218C0B1C88091784071380050E7C030979
0204750000722561BD166DD42A96FB359FFF359FFF359FFF359FFF359FFF359FFF359FFF
359FFF359FFF359FFF359FFF359FFF359FFF359FFF359FFF359FFF2890F60033A7000072
245DBA329AFBC1E1FFC1E1FFC1E1FFC1E1FFC1E1FFC1E1FFC1E1FFC1E1FFC1E1FFC1E1FF
C1E1FFC1E1FFC1E1FFC1E1FFC1E1FFC1E1FFC1E1FFC1E1FF3094F60000722259B71E84EC
9ACEFFA4D3FFA4D3FFA4D3FFA4D3FFA4D3FFA4D3FFA4D3FFA4D3FFA4D3FFA4D3FFA4D3FF
A4D3FFA4D3FFA4D3FFA4D3FFA4D3FF9ACEFF156FDC0000722055B31D54B52087EF7EC0FF
86C4FF86C4FF86C4FF86C4FF86C4FF86C4FF86C4FF86C4FF86C4FF86C4FF86C4FF6FB9FF
47A7FF47A7FF67B6FF1B79E500087B000072ffffff1D4CAC1A4BAE1887F461B2FF66B5FF
66B5FF66B5FF66B5FF66B5FF66B5FF66B5FF66B5FF55ADFF1C93FF0086FF0086FF0086FF
007EF600087B000072ffffffffffff1B48A91A43A6134CB3158AF947A5FF47A5FF47A5FF
47A5FF47A5FF43A4FF47A5FF3BA0FF0588FF0086FF0086FF0086FF007EF600198C000072
000072ffffffffffffffffff183EA2163A9F1044AE1287F92696FF2696FF2696FF2696FF
2394FF1E92FF0387FF0086FF0086FF0086FF007DF600198C000072000072ffffffffffff
ffffffffffffffffff14369B1331980E3CA8057FF80786FF0786FF0786FF0685FF0082FF
0082FF0082FF0082FF007AF600198C000072000072ffffffffffffffffffffffffffffff
ffffffffffff112C940F28910B34A2047AF80480FF0480FF0480FF0480FF0480FF0480FF
0378F600188C000072000072ffffffffffffffffffffffffffffffffffffffffffffffff
ffffff0E248D0C1F8A0C2E9D1984F71A8CFF1A8CFF1A8CFF1A8CFF1883F6041A8C000072
000072ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
0A1A860816830D2A97308FF73398FF3398FF2F8EF6081C8C000072000072ffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff06117F
050C7C0F24914190EE418FED0D1E8C000072000072ffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff030878010475
000072000072000072000072ffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffff
end
%%PageTrailer
%%Trailer
%%EOF
