--- user guide EN 1.0/creating_pyqgis_applications.tex	2009-11-30 19:25:27.243714597 +0100
+++ coding-compilation_guide/creating_pyqgis_applications.tex	2009-11-30 22:26:55.768715334 +0100
@@ -11,11 +11,11 @@
 realized with the refactoring of libraries that took place after the release
 of 0.8. Since the release of 0.9, development of standalone applications using
 either C++ or Python is possible. We recommend you use QGIS 1.0.0 or greater
-as the basis for your pythong applications because since this version we now
+as the basis for your python applications because since this version we now
 provide a stable consistent API.
 
-In this chapter we'll take a brief look at the process for creating a
-standalone Python application. The QGIS blog has several examples of creating
+In this chapter we'll take a brief look at the process of creating a
+standalone Python application. The QGIS blog has several examples for creating
 PyQGIS\footnote{An application created using Python and the QGIS bindings}
 applications. We'll use one of them as a starting point to get a look at how
 to create an application.
@@ -133,21 +133,29 @@
 44 
 45     # Create the actions for our tools and connect each to the appropriate
 46     # method
-47     self.actionAddLayer = QAction(QIcon("(qgis_prefix + "/share/qgis/themes/classic/mActionAddLayer.png"),
-48     \
+47     self.actionAddLayer = QAction(QIcon("(qgis_prefix + \
+       "/share/qgis/themes/classic/mActionAddLayer.png"),
+48
 49         "Add Layer", self.frame)
 50     self.connect(self.actionAddLayer, SIGNAL("activated()"), self.addLayer)
-51     self.actionZoomIn = QAction(QIcon("(qgis_prefix + "/share/qgis/themes/classic/mActionZoomIn.png"), \
-52         "Zoom In", self.frame)
+51     self.actionZoomIn = QAction(QIcon("(qgis_prefix + \
+       "/share/qgis/themes/classic/mActionZoomIn.png"), \
+       "Zoom In", self.frame)
+52     
 53     self.connect(self.actionZoomIn, SIGNAL("activated()"), self.zoomIn)
-54     self.actionZoomOut = QAction(QIcon("(qgis_prefix + "/share/qgis/themes/classic/mActionZoomOut.png"), \
+54     self.actionZoomOut = QAction(QIcon("(qgis_prefix + \
+       "/share/qgis/themes/classic/mActionZoomOut.png"), \
 55         "Zoom Out", self.frame)
 56     self.connect(self.actionZoomOut, SIGNAL("activated()"), self.zoomOut)
-57     self.actionPan = QAction(QIcon("(qgis_prefix + "/share/qgis/themes/classic/mActionPan.png"), \
-58         "Pan", self.frame)
+57     self.actionPan = QAction(QIcon("(qgis_prefix + \
+       "/share/qgis/themes/classic/mActionPan.png"), \
+       "Pan", self.frame)
+58
 59     self.connect(self.actionPan, SIGNAL("activated()"), self.pan)
-60     self.actionZoomFull = QAction(QIcon("(qgis_prefix + "/share/qgis/themes/classic/mActionZoomFullExtent.png"), \
-61         "Zoom Full Extent", self.frame)
+60     self.actionZoomFull = QAction(QIcon("(qgis_prefix + \
+       "/share/qgis/themes/classic/mActionZoomFullExtent.png"), \
+       "Zoom Full Extent", self.frame)
+61
 62     self.connect(self.actionZoomFull, SIGNAL("activated()"),
 63     self.zoomFull)
 64 
@@ -354,24 +362,17 @@
 
 When the application starts up, it looks like this:
 
-%\begin{figure}[ht]
-%\begin{center}
-%  \caption{Starting the new demo application}\label{fig:demo_app_startup}%\smallskip
-%  \includegraphics[scale=0.8]{getdsn}
-%\end{center}
-%\end{figure}
+\begin{figure}[ht]
+\begin{center}
+  \caption{Starting the new demo application \nixcaption} \label{fig:demo_app_startup}
+  \includegraphics[clip=true, width=12cm]{python1_application}
+\end{center}
+\end{figure}
 
 To add the \filename{world\_borders} layer, click on the 
 \usertext{Add Layer} tool and navigate to the data directory.
 Select the shapefile and click \button{Open} to add it to the map. 
-Our custom fill color is applied and the result is:
-
-%\begin{figure}[ht]
-%\begin{center}
-%  \caption{Adding a layer the demo application}\label{fig:demo_app_done}%\smallskip
-%  \includegraphics[scale=0.8]{getdsn}
-%\end{center}
-%\end{figure}
+Our custom fill color is applied and the result is shown in Figure \ref{fig:demo_app_done}.
 
 Creating a PyQGIS application is really pretty simple.  In less than 150 lines
 of code we have an application that can load a shapefile and navigate the map.
@@ -383,12 +384,10 @@
 the works. This is pretty impressive, considering that this development has 
 taken place even before the official release of QGIS 1.0.
 
-\begin{Tip}\caption{\textsc{Documentation For PyQGIS}}
-\qgistip{Whether you are writing a plugin or a PyQGIS application, you are
-going to need to refer to both the QGIS API documentation
-(\url{http://doc.qgis.org}) and the PyQt Python Bindings Reference Guide
-(\url{http://www.riverbankcomputing.com/Docs/PyQt4/pyqt4ref.html}). These
-documents provide information about the classes and methods you'll use to
-bring your Python creation to life.
-}
-\end{Tip} 
+\begin{figure}[ht]
+\begin{center}
+  \caption{Adding a layer the demo application \nixcaption} \label{fig:demo_app_done}
+  \includegraphics[clip=true, width=12cm]{python2_application}
+\end{center}
+\end{figure}
+
