%!PS-Adobe-3.0 EPSF-3.0
%%Creator: (ImageMagick)
%%Title: (mActionMoveItemsToBottom.eps)
%%CreationDate: (Sat Jan 24 07:56:27 2009)
%%BoundingBox: 0 0 20 20
%%HiResBoundingBox: 0 0 19.9975 20
%%DocumentData: Clean7Bit
%%LanguageLevel: 1
%%Pages: 1
%%EndComments

%%BeginDefaults
%%EndDefaults

%%BeginProlog
%
% Display a color image.  The image is displayed in color on
% Postscript viewers or printers that support color, otherwise
% it is displayed as grayscale.
%
/DirectClassPacket
{
  %
  % Get a DirectClass packet.
  %
  % Parameters:
  %   red.
  %   green.
  %   blue.
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile color_packet readhexstring pop pop
  compression 0 eq
  {
    /number_pixels 3 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add 3 mul def
  } ifelse
  0 3 number_pixels 1 sub
  {
    pixels exch color_packet putinterval
  } for
  pixels 0 number_pixels getinterval
} bind def

/DirectClassImage
{
  %
  % Display a DirectClass image.
  %
  systemdict /colorimage known
  {
    columns rows 8
    [
      columns 0 0
      rows neg 0 rows
    ]
    { DirectClassPacket } false 3 colorimage
  }
  {
    %
    % No colorimage operator;  convert to grayscale.
    %
    columns rows 8
    [
      columns 0 0
      rows neg 0 rows
    ]
    { GrayDirectClassPacket } image
  } ifelse
} bind def

/GrayDirectClassPacket
{
  %
  % Get a DirectClass packet;  convert to grayscale.
  %
  % Parameters:
  %   red
  %   green
  %   blue
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile color_packet readhexstring pop pop
  color_packet 0 get 0.299 mul
  color_packet 1 get 0.587 mul add
  color_packet 2 get 0.114 mul add
  cvi
  /gray_packet exch def
  compression 0 eq
  {
    /number_pixels 1 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add def
  } ifelse
  0 1 number_pixels 1 sub
  {
    pixels exch gray_packet put
  } for
  pixels 0 number_pixels getinterval
} bind def

/GrayPseudoClassPacket
{
  %
  % Get a PseudoClass packet;  convert to grayscale.
  %
  % Parameters:
  %   index: index into the colormap.
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile byte readhexstring pop 0 get
  /offset exch 3 mul def
  /color_packet colormap offset 3 getinterval def
  color_packet 0 get 0.299 mul
  color_packet 1 get 0.587 mul add
  color_packet 2 get 0.114 mul add
  cvi
  /gray_packet exch def
  compression 0 eq
  {
    /number_pixels 1 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add def
  } ifelse
  0 1 number_pixels 1 sub
  {
    pixels exch gray_packet put
  } for
  pixels 0 number_pixels getinterval
} bind def

/PseudoClassPacket
{
  %
  % Get a PseudoClass packet.
  %
  % Parameters:
  %   index: index into the colormap.
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile byte readhexstring pop 0 get
  /offset exch 3 mul def
  /color_packet colormap offset 3 getinterval def
  compression 0 eq
  {
    /number_pixels 3 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add 3 mul def
  } ifelse
  0 3 number_pixels 1 sub
  {
    pixels exch color_packet putinterval
  } for
  pixels 0 number_pixels getinterval
} bind def

/PseudoClassImage
{
  %
  % Display a PseudoClass image.
  %
  % Parameters:
  %   class: 0-PseudoClass or 1-Grayscale.
  %
  currentfile buffer readline pop
  token pop /class exch def pop
  class 0 gt
  {
    currentfile buffer readline pop
    token pop /depth exch def pop
    /grays columns 8 add depth sub depth mul 8 idiv string def
    columns rows depth
    [
      columns 0 0
      rows neg 0 rows
    ]
    { currentfile grays readhexstring pop } image
  }
  {
    %
    % Parameters:
    %   colors: number of colors in the colormap.
    %   colormap: red, green, blue color packets.
    %
    currentfile buffer readline pop
    token pop /colors exch def pop
    /colors colors 3 mul def
    /colormap colors string def
    currentfile colormap readhexstring pop pop
    systemdict /colorimage known
    {
      columns rows 8
      [
        columns 0 0
        rows neg 0 rows
      ]
      { PseudoClassPacket } false 3 colorimage
    }
    {
      %
      % No colorimage operator;  convert to grayscale.
      %
      columns rows 8
      [
        columns 0 0
        rows neg 0 rows
      ]
      { GrayPseudoClassPacket } image
    } ifelse
  } ifelse
} bind def

/DisplayImage
{
  %
  % Display a DirectClass or PseudoClass image.
  %
  % Parameters:
  %   x & y translation.
  %   x & y scale.
  %   label pointsize.
  %   image label.
  %   image columns & rows.
  %   class: 0-DirectClass or 1-PseudoClass.
  %   compression: 0-none or 1-RunlengthEncoded.
  %   hex color packets.
  %
  gsave
  /buffer 512 string def
  /byte 1 string def
  /color_packet 3 string def
  /pixels 768 string def

  currentfile buffer readline pop
  token pop /x exch def
  token pop /y exch def pop
  x y translate
  currentfile buffer readline pop
  token pop /x exch def
  token pop /y exch def pop
  currentfile buffer readline pop
  token pop /pointsize exch def pop
  /Times-Roman findfont pointsize scalefont setfont
  x y scale
  currentfile buffer readline pop
  token pop /columns exch def
  token pop /rows exch def pop
  currentfile buffer readline pop
  token pop /class exch def pop
  currentfile buffer readline pop
  token pop /compression exch def pop
  class 0 gt { PseudoClassImage } { DirectClassImage } ifelse
  grestore
} bind def
%%EndProlog
%%Page:  1 1
%%PageBoundingBox: 0 0 20 20
userdict begin
DisplayImage
0 0
19.9975 19.9975
12.000000
20 20
0
0
BD7330BD7330BD7330BD7330BD7330BD7330BD7330BD7330BD7330BD7330ffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffBD7330FFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBD7330ffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffBD7330FFFFFFFFF200FFF200FFF200FFF200FFF200FFEC00
FFE600BD7330ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
BD7330FFFFFFFFEA00FFEA00FFEA00FFEA00FFEA00FFE400FFDE00BD7330ffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffBD7330FFFFFFFFE200FFE200
FFE200FFE200FFE200FFDC00FFD700BD7330ffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffBD7330FFFFFFFFDB00FFDB00FFDB00FFDB00FFDB00FFD500
FFCF00BD73303077D03077D03077D03077D03077D0ffffffffffffffffffffffffffffff
BD7330FFFFFFFFD300FFD300FFD300FFD300FFD300FFCD00FFC700BD7330FFFFFFFFFFFF
FFFFFFFFFFFF3077D0ffffffffffffffffffffffffffffffBD7330FFFFFFFFE200FFDC00
FFD700FFD100FFCB00FFC500FFBF00BD7330A7D6FFA7D6FFA7D6FFA7D6FF3077D0ffffff
ffffffffffffffffffffffffBD7330FFFFFFFFDB00FFD500FFCF00FFC900FFC300FFBD00
FFB800BD73309CCFFF9CCFFF9CCFFF9CCFFF3077D0ffffffffffffffffffffffffffffff
BD7330BD7330BD7330BD7330BD7330BD7330BD7330BD7330BD7330BD73308EC6FF8EC6FF
8EC6FF8EC6FF3077D0ffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffff3077D0FFFFFF7CBBFF7CBBFF7CBBFFBD7330BD7330BD7330BD7330BD7330BD7330
BD7330BD7330BD7330BD7330ffffffffffffffffffffffffffffff3077D0FFFFFF6BB0FF
6BB0FF6BB0FFBD7330FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBD7330
ffffffffffffffffffffffffffffff3077D0FFFFFF5BA7FF5BA7FF5BA7FFBD7330FFFFFF
FFF200FFF200FFF200FFF200FFF200FFEC00FFE600BD7330ffffffffffffffffffffffff
ffffff3077D0FFFFFF59A6FF59A6FF59A6FFBD7330FFFFFFFFEA00FFEA00FFEA00FFEA00
FFEA00FFE400FFDE00BD7330ffffffffffffffffffffffffffffff3077D03077D03077D0
3077D03077D0BD7330FFFFFFFFE200FFE200FFE200FFE200FFE200FFDC00FFD700BD7330
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffBD7330FFFFFF
FFDB00FFDB00FFDB00FFDB00FFDB00FFD500FFCF00BD7330ffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffBD7330FFFFFFFFD300FFD300FFD300FFD300
FFD300FFCD00FFC700BD7330ffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffBD7330FFFFFFFFE200FFDC00FFD700FFD100FFCB00FFC500FFBF00BD7330
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffBD7330FFFFFF
FFDB00FFD500FFCF00FFC900FFC300FFBD00FFB800BD7330ffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffBD7330BD7330BD7330BD7330BD7330BD7330
BD7330BD7330BD7330BD7330
end
%%PageTrailer
%%Trailer
%%EOF
